#!/usr/bin/python
import os
import re
import urllib

#autorefresh_js
autorefresh_js="""
<!--RemoveMeStart-->
<script type="text/javascript">
	var interval_id = 0;
	function onLoad() {window.scrollTo(0, document.documentElement.offsetHeight)};
	function reFresh() {location.reload(true)};
	function autorefresh()
	{
		if (interval_id == 0)
		{
			interval_id = window.setInterval("reFresh()",%d);
			document.getElementById("ar_on").value="AutoRefresh Off";
		}
		else
		{
			window.clearInterval(interval_id);
			interval_id = 0;
			document.getElementById("ar_on").value="AutoRefresh On";
		}
	}
</script>
<!--RemoveMeStop-->
"""

#autorefresh_button
autorefresh_button="""
<!--RemoveMeStart-->
<FORM style="display:inline">
<INPUT id="ar_on" Type=BUTTON OnClick="autorefresh();" Value="AutoRefresh Off"/>
</FORM>
<script>autorefresh();</script>
<!--RemoveMeStop-->
"""



class intopix_test_report(object):

	#This create a html report on disk
	#auto_refresh: if > 0 html report will contain a javascript to refresh page every auto_refresh seconds
	def __init__(self, report_path, report_title, auto_refresh = 2, append = False, red_background = False):
	
		need_header = True;
		self._report_path = report_path;
		self._css_path = self._report_path.replace("html","css")
		self._report_title = report_title;
		self._auto_refresh = auto_refresh;
		if (not append or not os.path.exists(report_path)):
			self._f = open(self._report_path,'wb');
		else:
			self._f = open(self._report_path,'rb');
			lines = [];
			for line in self._f.readlines():
				if not re.match(r'</html>|</body>', line):
					lines.append(line);
				if re.match(r'<html>', line):
					need_header = False;

			self._f.close();
			self._f = open(self._report_path,'wb')
			for line in lines:
				self.__addline(line);

		if need_header:
			self.__write_header();
		#Generated the summary css
		self.__generate_css(red_background)
		
	
	def __addline(self, line):
		
		self._f.write(line.rstrip());
		self._f.write('\n');
		self._f.flush();
		os.fsync(self._f.fileno());

	#Generate the summary css if not generated yet
	def __generate_css(self, red_background=False):
		summary_css_path = self._css_path
		if not os.path.exists(summary_css_path):
			#Write the whole css
			with open(summary_css_path, 'wb') as f:
				f.write("""
/*intopix autogenerated test reports summary Style Sheet file*/
body
{
	/*background : red;*/
}
""")
		if red_background:
			#just uncomment the background line
			with open(summary_css_path, "r") as fin:
				lines = fin.readlines()
			with open(summary_css_path, "w") as fout:
				for line in lines:
					fout.write(re.sub(r'/\*background : red;\*/', 'background : red;', line))
		return

	def __generate_javascript(self):

		if (self._auto_refresh > 0):
			self.__addline(autorefresh_js % (1000*self._auto_refresh));
		
	
	def __generate_autorefresh_button(self):
		
		if (self._auto_refresh):
			self.__addline(autorefresh_button);
	
	def __remove_autorefresh_button(self):
		
		file_lines = open(self._report_path).readlines();
		to_cut = []
		for idx, line in enumerate(file_lines):
			if '<!--RemoveMeStart-->' in line:
				to_cut.append([idx]);
			if '<!--RemoveMeStop-->' in line:
				to_cut[-1].append(1+idx);
		
		offset = 0;
		for cut_range in to_cut:
			del file_lines[cut_range[0]-offset:cut_range[1]-offset];
			offset += cut_range[1] - cut_range[0];
		
		open(self._report_path,"w").writelines(file_lines);

	
	def __write_header( self ):
		
		self.__addline("<html>");
		self.__addline("<head>");
		self.__addline('<link rel="stylesheet" type="text/css" href="%s" />' % self.get_relative_path(self._css_path));
		self.__addline("<title>" + self._report_title +"</title>");
		self.__generate_javascript();
		self.__addline('</head>');
		self.__addline('<body onload="onLoad()">');
		self.__generate_autorefresh_button();
	
	def add_title( self , title):
		self.__addline("<h2>%s</h2>" % title);
	
	def open_table( self, column_titles=[], color = 'white', border_size = '1'):
		
		self.__addline('<table border="1">');
		if (len(column_titles)>0):
			self.add_table_row(column_titles, color, 'th');
		
	
	def add_table_row(self, row_values, color = 'white', columns_type = 'td'):
		open_tag = "<%s>" % columns_type;
		close_tag = "</%s>" % columns_type;
		self.__addline("<tr bgcolor=" + color + ">");
		if (len(row_values) > 0):
			self.__addline(open_tag);
			self.__addline((close_tag + '\n' + open_tag).join([str(value) for value in row_values]));
			self.__addline(close_tag);
		self.__addline("</tr>");
	
	def close_table(self, column_titles=[] , border_size = '1'):
		
		self.__addline("</table>");

	def get_relative_path(self, file):
		report_dir = os.path.split(self._report_path)[0];
		if (report_dir == ''):
			report_dir = '.';
		relpath = os.path.relpath(file,report_dir);
		relpath = relpath.replace(os.path.sep, '/');
		return urllib.quote(relpath)

	def generate_url_link(self, name, file):
		return '<a href="' + self.get_relative_path(file) + '">' + name + '</a>';
	
	def generate_img_content(self, name, img_file):

		report_dir = os.path.split(self._report_path)[0];
		if (report_dir == ''):
			report_dir = '.';
		relpath = os.path.relpath(img_file,report_dir);
		relpath = relpath.replace(os.path.sep, '/');
		return '<img style="max-width:100%; max-height:100%;" src="' + urllib.quote(relpath) + '"/>';
	
	def close(self):		
		self.__addline("</body>");
		self.__addline("</html>");
		self._f.close()
		self.__remove_autorefresh_button();


from HTMLParser import HTMLParser

class htmltableParser(HTMLParser):
        
	def reset_parser(self):
		self._lines = [];
		self._count = 0;
		self._in_column = False;
		self._dict = [];
		self._line = {};
		self._reading_titles = True;
		
        def get_lines(self):
		return self._lines;

	def handle_data(self, data):
                if (self._in_column):
			if self._reading_titles:
				self._dict.append(data.strip());
			else:
				if (self._dict[self._count] != 'logpath'):
					self._line[self._dict[self._count]] = data;
					self._count += 1;
				
		
	def handle_starttag(self, tag, attr):
		if (tag == 'th') or (tag == 'td'):
			self._in_column = True;
	
	def handle_endtag(self, tag):
		if (tag == 'th') or (tag == 'td'):
			self._in_column = False;
		
		if (tag == 'tr'):
			if self._reading_titles:
				self._reading_titles = False;
			else:
				self._lines.append(self._line);
				self._line = {};
				self._count = 0;
				self._in_column = False;
			


#This class
class intopix_test_report_parser():

	def __init__( self, report_path):
		f = open(report_path)
		self._content = lines = f.read();
	
	def get_parsed_lines(self):
		h = htmltableParser();
		h.reset_parser();
		h.feed(self._content);
		return h.get_lines();



if __name__ == '__main__':
	import time;
	rep = intopix_test_report("./report.html", 'My beautiful report', 5);
	rep.open_table(['Colum1','Colum2','Colum3','Colum4'], 'orange');
	for i in range(5):
		rep.add_table_row(['Val1','Val2','Val3','Val4'], 'red');
		rep.add_table_row(['Val5','Val2','Val3','Val8'], 'lightgreen');
		time.sleep(1);
	rep.close_table();
	rep.close();

	rep = intopix_test_report("./report.html", 'My beautiful report', 5, True);
	rep.open_table(['Colum1','Colum2','Colum3','Colum4'], 'green');
	for i in range(5):
		rep.add_table_row(['Val1','Val2','Val3','Val4'], 'red');
		rep.add_table_row(['Val5','Val2','Val3','Val8'], 'lightgreen');
		time.sleep(1);
	rep.close_table();
	rep.close();
